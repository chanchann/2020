/*
两种类型的金字塔：

高斯金字塔：用于下采样，主要的图像金字塔；
拉普拉斯金字塔：用于重建图像，也就是预测残差（我的理解是，因为小图像放大，必须插入一些像素值，那这些像素值是什么才合适呢，那就得进行根据周围像素进行预测），对图像进行最大程度的还原。比如一幅小图像重建为一幅大图像，

图像金字塔有两个高频出现的名词：上采样和下采样。

上采样：就是图片放大（所谓上嘛，就是变大），使用PryUp函数
下采样：就是图片缩小（所谓下嘛，就是变小），使用PryDown函数
下采样将步骤：

对图像进行高斯内核卷积
将所有偶数行和列去除
下采样就是图像压缩，会丢失图像信息。

上采样步骤：

将图像在每个方向放大为原来的两倍，新增的行和列用0填充；
使用先前同样的内核（乘以4）与放大后的图像卷积，获得新增像素的近似值。
上、下采样都存在一个严重的问题，那就是图像变模糊了，因为缩放的过程中发生了信息丢失的问题。要解决这个问题，就得看拉普拉斯金字塔了。

无论是放大还是缩小，图像都变得模糊了，这就是他的致命缺点。

个人认为，要做缩放就用resize函数吧，毕竟方便太多而且图像不会变模糊
*/


#include<opencv2/opencv.hpp>   

using namespace std;
using namespace cv;

//图像金字塔
int main() {
    Mat img = imread("../../pics/01.jpg");
    Mat dst, dst2;
    pyrUp(img, dst, Size(img.cols*2, img.rows*2)); //放大一倍
    pyrDown(img, dst2, Size(img.cols * 0.5, img.rows * 0.5)); //缩小为原来的一半
    imwrite("pyrUp.jpg", dst);
    imwrite("pyrDown.jpg", dst2);
}